{"version":3,"sources":["PanContainer.tsx"],"names":["PanContainer","children","close","setIsDragging","translationXY","Animated","ValueXY","current","scale","Value","_initialTouches","onRelease","_","gestureState","dy","length","parallel","timing","duration","toValue","useNativeDriver","x","y","start","panResponder","React","useRef","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","absDx","Math","abs","dx","absDY","numberActiveTouches","onPanResponderGrant","evt","nativeEvent","touches","setOffset","onPanResponderMove","setValue","currentDistance","initialDistance","newScale","onPanResponderTerminationRequest","onPanResponderRelease","onPanResponderTerminate","panHandlers","transform","translateX","translateY"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  PanResponder,\n  PanResponderGestureState,\n  View,\n} from 'react-native';\nimport { getDistance, getScale } from './_helpers';\n\nconst PanContainer = ({\n  children,\n  close,\n  setIsDragging,\n}: {\n  children: any;\n  close: () => void;\n  setIsDragging: any;\n}) => {\n  const translationXY = useRef(new Animated.ValueXY()).current;\n  const scale = useRef(new Animated.Value(1)).current;\n  let _initialTouches: any = useRef().current;\n\n  const onRelease = (\n    _: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): void | boolean => {\n    setIsDragging(false);\n    if (gestureState.dy > 180 && _initialTouches.length === 1) {\n      close();\n      return false;\n    }\n\n    Animated.parallel([\n      Animated.timing(scale, {\n        duration: 100,\n        toValue: 1,\n        useNativeDriver: true,\n      }),\n\n      Animated.timing(translationXY.x, {\n        duration: 100,\n        toValue: 0,\n        useNativeDriver: true,\n      }),\n      Animated.timing(translationXY.y, {\n        duration: 100,\n        toValue: 0,\n        useNativeDriver: true,\n      }),\n    ]).start();\n  };\n\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponder: (\n        _: GestureResponderEvent,\n        gestureState: PanResponderGestureState\n      ) => {\n        const absDx = Math.abs(gestureState.dx);\n        const absDY = Math.abs(gestureState.dy);\n        if (absDY > 5 && absDx <= 2 && gestureState.numberActiveTouches <= 1) {\n          return true;\n        }\n        if (absDx > 0 && gestureState.numberActiveTouches <= 1) {\n          return false;\n        }\n        return true;\n      },\n      // onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n\n      onPanResponderGrant: (evt: GestureResponderEvent) => {\n        setIsDragging(true);\n        _initialTouches = evt.nativeEvent.touches;\n\n        translationXY.setOffset({\n          x: 0,\n          y: 0,\n        });\n        return true;\n      },\n      onPanResponderMove: (\n        evt: GestureResponderEvent,\n        gestureState: PanResponderGestureState\n      ) => {\n        const { touches } = evt.nativeEvent;\n\n        if (touches.length <= 1 && Math.abs(gestureState.dy) > 10) {\n          translationXY.y.setValue(gestureState.dy);\n          return true;\n        }\n        if (touches.length <= 1 && Math.abs(gestureState.dx) > 0) {\n          setIsDragging(false);\n          return false;\n        }\n        if (touches.length < 2) {\n          // Trigger a release\n          onRelease(evt, gestureState);\n          return false;\n        }\n\n        const { dx, dy } = gestureState;\n        translationXY.x.setValue(dx);\n        translationXY.y.setValue(dy);\n        // for scaling photo\n        const currentDistance = getDistance(touches);\n        const initialDistance = getDistance(_initialTouches);\n        const newScale = getScale(currentDistance, initialDistance);\n        scale.setValue(newScale);\n        return true;\n      },\n      onPanResponderTerminationRequest: () => {\n        return true;\n      },\n      onPanResponderRelease: (\n        evt: GestureResponderEvent,\n        gestureState: PanResponderGestureState\n      ) => {\n        onRelease(evt, gestureState);\n        return true;\n      },\n      onPanResponderTerminate: () => true,\n    })\n  ).current;\n\n  return (\n    <View>\n      <Animated.View\n        {...panResponder.panHandlers}\n        style={{\n          transform: [\n            {\n              translateX: translationXY.x,\n            },\n            {\n              translateY: translationXY.y,\n            },\n            { scale: scale },\n          ],\n        }}\n      >\n        {children}\n      </Animated.View>\n    </View>\n  );\n};\n\nexport default PanContainer;\n"]}