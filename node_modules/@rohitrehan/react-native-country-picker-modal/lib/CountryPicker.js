import React, { useState, useEffect } from 'react';
import CountryModal from './CountryModal';
import HeaderModal from './HeaderModal';
import { FlagType } from './types';
import CountryFilter from './CountryFilter';
import FlagButton from './FlagButton';
import { useContext } from './CountryContext';
import CountryList from './CountryList';
const renderFlagButton = (props) => props.renderFlagButton ? (props.renderFlagButton(props)) : (<FlagButton {...props}/>);
const renderFilter = (props) => props.renderCountryFilter ? (props.renderCountryFilter(props)) : (<CountryFilter {...props}/>);
const CountryPicker = (props) => {
    const { allowFontScaling, countryCode, region, subregion, countryCodes, renderFlagButton: renderButton, renderCountryFilter, filterProps, modalProps, flatListProps, onSelect, withEmoji, withFilter, withCloseButton, withCountryNameButton, withCallingCodeButton, withCurrencyButton, containerButtonStyle, withAlphaFilter, withCallingCode, withCurrency, withFlag, withModal, disableNativeModal, withFlagButton, onClose: handleClose, onOpen: handleOpen, closeButtonImage, closeButtonStyle, closeButtonImageStyle, excludeCountries, placeholder, preferredCountries, visible: visibleFromProps, } = props;
    const [visible, setVisible] = useState(visibleFromProps ?? false);
    const [countries, setCountries] = useState([]);
    const [filter, setFilter] = useState('');
    const [filterFocus, setFilterFocus] = useState(false);
    const { translation, getCountriesAsync } = useContext();
    useEffect(() => {
        setVisible(visibleFromProps ?? false);
    }, [visibleFromProps]);
    const onOpen = () => {
        setVisible(true);
        if (handleOpen) {
            handleOpen();
        }
    };
    const onClose = () => {
        setFilter('');
        setVisible(false);
        if (handleClose) {
            handleClose();
        }
    };
    const onSelectClose = (country) => {
        onSelect(country);
        onClose();
    };
    const onFocus = () => setFilterFocus(true);
    const onBlur = () => setFilterFocus(false);
    const flagProp = {
        allowFontScaling,
        countryCode,
        withEmoji,
        withCountryNameButton,
        withCallingCodeButton,
        withCurrencyButton,
        withFlagButton,
        renderFlagButton: renderButton,
        onOpen,
        containerButtonStyle,
        placeholder: placeholder || 'Select Country',
    };
    useEffect(() => {
        let cancel = false;
        getCountriesAsync(withEmoji ? FlagType.EMOJI : FlagType.FLAT, translation, region, subregion, countryCodes, excludeCountries, preferredCountries, withAlphaFilter)
            .then((countries) => (cancel ? null : setCountries(countries)))
            .catch(console.warn);
        return () => {
            cancel = true;
        };
    }, [
        translation,
        withEmoji,
        countryCodes,
        excludeCountries,
        getCountriesAsync,
        preferredCountries,
        region,
        setCountries,
        subregion,
        withAlphaFilter,
    ]);
    return (<>
      {(withModal ?? true) && renderFlagButton(flagProp)}
      <CountryModal {...{ visible, withModal, disableNativeModal, ...modalProps }} onRequestClose={onClose} onDismiss={onClose}>
        <HeaderModal {...{
        withFilter,
        onClose,
        closeButtonImage,
        closeButtonImageStyle,
        closeButtonStyle,
        withCloseButton: withCloseButton ?? true,
    }} renderFilter={(props) => renderFilter({
            ...props,
            allowFontScaling,
            renderCountryFilter,
            onChangeText: setFilter,
            value: filter,
            onFocus,
            onBlur,
            ...filterProps,
        })}/>
        <CountryList {...{
        onSelect: onSelectClose,
        data: countries,
        letters: [],
        withAlphaFilter: withAlphaFilter && filter === '',
        withCallingCode,
        withCurrency,
        withFlag,
        withFlagButton,
        withEmoji,
        filter,
        filterFocus,
        flatListProps,
    }}/>
      </CountryModal>
    </>);
};
export default CountryPicker;
//# sourceMappingURL=CountryPicker.js.map