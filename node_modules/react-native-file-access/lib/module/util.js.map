{"version":3,"names":["regexEscape","literal","replace","normalizeSeparator","path","separator","sepRe","RegExp","splitPath","norm","dir","base","endsWith","substring","length","idx","lastIndexOf","Util","basename","arguments","undefined","dirname","extname","extIdx","sepIdx"],"sources":["util.ts"],"sourcesContent":["/**\n * Escape for use as literal string in a regex.\n */\nfunction regexEscape(literal: string) {\n  return literal.replace(/[\\^$\\\\.*+?()[\\]{}|]/g, '\\\\$&');\n}\n\n/**\n * Condense consecutive separators.\n */\nfunction normalizeSeparator(path: string, separator: string) {\n  const sepRe = new RegExp(`(${regexEscape(separator)}){2,}`, 'g');\n  return path.replace(sepRe, separator.replace(/\\$/g, '$$$$'));\n}\n\n/**\n * Split path on last separator.\n */\nfunction splitPath(path: string, separator: string) {\n  let norm = normalizeSeparator(path, separator);\n  if (norm === separator) {\n    return { dir: separator, base: '' };\n  }\n  if (norm.endsWith(separator)) {\n    norm = norm.substring(0, norm.length - separator.length);\n  }\n  const idx = norm.lastIndexOf(separator);\n  if (idx === -1) {\n    return { dir: '.', base: norm };\n  }\n  return {\n    dir: norm.substring(0, idx),\n    base: norm.substring(idx + separator.length),\n  };\n}\n\nexport const Util = {\n  /**\n   * Get the file/folder name from the end of the path.\n   */\n  basename(path: string, separator = '/') {\n    return splitPath(path, separator).base;\n  },\n\n  /**\n   * Get the path containing the file/folder.\n   */\n  dirname(path: string, separator = '/') {\n    return splitPath(path, separator).dir;\n  },\n\n  /**\n   * Get the file extension.\n   */\n  extname(path: string, separator = '/') {\n    const extIdx = path.lastIndexOf('.');\n    if (extIdx <= 0) {\n      return '';\n    }\n\n    const sepIdx = path.lastIndexOf(separator);\n    if (sepIdx === -1 || extIdx > sepIdx + separator.length) {\n      return path.substring(extIdx + 1);\n    }\n    return '';\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAWA,CAACC,OAAe,EAAE;EACpC,OAAOA,OAAO,CAACC,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC;AACxD;;AAEA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,IAAY,EAAEC,SAAiB,EAAE;EAC3D,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAE,IAAGP,WAAW,CAACK,SAAS,CAAE,OAAM,EAAE,GAAG,CAAC;EAChE,OAAOD,IAAI,CAACF,OAAO,CAACI,KAAK,EAAED,SAAS,CAACH,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAC9D;;AAEA;AACA;AACA;AACA,SAASM,SAASA,CAACJ,IAAY,EAAEC,SAAiB,EAAE;EAClD,IAAII,IAAI,GAAGN,kBAAkB,CAACC,IAAI,EAAEC,SAAS,CAAC;EAC9C,IAAII,IAAI,KAAKJ,SAAS,EAAE;IACtB,OAAO;MAAEK,GAAG,EAAEL,SAAS;MAAEM,IAAI,EAAE;IAAG,CAAC;EACrC;EACA,IAAIF,IAAI,CAACG,QAAQ,CAACP,SAAS,CAAC,EAAE;IAC5BI,IAAI,GAAGA,IAAI,CAACI,SAAS,CAAC,CAAC,EAAEJ,IAAI,CAACK,MAAM,GAAGT,SAAS,CAACS,MAAM,CAAC;EAC1D;EACA,MAAMC,GAAG,GAAGN,IAAI,CAACO,WAAW,CAACX,SAAS,CAAC;EACvC,IAAIU,GAAG,KAAK,CAAC,CAAC,EAAE;IACd,OAAO;MAAEL,GAAG,EAAE,GAAG;MAAEC,IAAI,EAAEF;IAAK,CAAC;EACjC;EACA,OAAO;IACLC,GAAG,EAAED,IAAI,CAACI,SAAS,CAAC,CAAC,EAAEE,GAAG,CAAC;IAC3BJ,IAAI,EAAEF,IAAI,CAACI,SAAS,CAACE,GAAG,GAAGV,SAAS,CAACS,MAAM;EAC7C,CAAC;AACH;AAEA,OAAO,MAAMG,IAAI,GAAG;EAClB;AACF;AACA;EACEC,QAAQA,CAACd,IAAY,EAAmB;IAAA,IAAjBC,SAAS,GAAAc,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;IACpC,OAAOX,SAAS,CAACJ,IAAI,EAAEC,SAAS,CAAC,CAACM,IAAI;EACxC,CAAC;EAED;AACF;AACA;EACEU,OAAOA,CAACjB,IAAY,EAAmB;IAAA,IAAjBC,SAAS,GAAAc,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;IACnC,OAAOX,SAAS,CAACJ,IAAI,EAAEC,SAAS,CAAC,CAACK,GAAG;EACvC,CAAC;EAED;AACF;AACA;EACEY,OAAOA,CAAClB,IAAY,EAAmB;IAAA,IAAjBC,SAAS,GAAAc,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;IACnC,MAAMI,MAAM,GAAGnB,IAAI,CAACY,WAAW,CAAC,GAAG,CAAC;IACpC,IAAIO,MAAM,IAAI,CAAC,EAAE;MACf,OAAO,EAAE;IACX;IAEA,MAAMC,MAAM,GAAGpB,IAAI,CAACY,WAAW,CAACX,SAAS,CAAC;IAC1C,IAAImB,MAAM,KAAK,CAAC,CAAC,IAAID,MAAM,GAAGC,MAAM,GAAGnB,SAAS,CAACS,MAAM,EAAE;MACvD,OAAOV,IAAI,CAACS,SAAS,CAACU,MAAM,GAAG,CAAC,CAAC;IACnC;IACA,OAAO,EAAE;EACX;AACF,CAAC"}