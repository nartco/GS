{"version":3,"names":["NativeModules","Platform","NativeEventEmitter","Util","LINKING_ERROR","select","ios","default","isTurboModuleEnabled","global","__turboModuleProxy","FileAccessModule","require","FileAccess","FileAccessNative","Proxy","get","Error","nextRequestId","registerFetchListener","requestId","resolve","reject","onProgress","eventEmitter","listener","addListener","event","state","bytesRead","contentLength","done","remove","message","headers","ok","redirected","status","statusText","url","sleep","milliseconds","Promise","setTimeout","wrapCpListener","source","target","completion","sourceStat","FileSystem","stat","targetStat","race","then","catch","size","appendFile","path","data","encoding","arguments","length","undefined","concatFiles","cp","res","cpAsset","asset","type","cpExternal","targetName","dir","df","exists","fetch","resource","init","fetchManaged","cancel","cancelFetch","result","getAppGroupDir","groupName","hash","algorithm","isDir","ls","mkdir","mv","readFile","readFileChunk","offset","statDir","unlink","unzip","writeFile","Dirs","getConstants","CacheDir","DocumentDir","MainBundleDir","AndroidScoped","appendPath","basePath","segment","encodeURIComponent"],"sources":["index.ts"],"sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport type { FileStat, FsStat, Spec } from './NativeFileAccess';\nimport type {\n  AssetType,\n  Encoding,\n  ExternalDir,\n  FetchEvent,\n  FetchInit,\n  FetchResult,\n  HashAlgorithm,\n  ManagedFetchResult,\n  ProgressListener,\n} from './types';\nimport { NativeEventEmitter } from 'react-native';\n\nexport type {\n  AssetType,\n  Encoding,\n  ExternalDir,\n  FetchResult,\n  HashAlgorithm,\n  NetworkType,\n} from './types';\nexport type { FileStat, FsStat } from './NativeFileAccess';\n\nexport { Util } from './util';\n\nconst LINKING_ERROR =\n  `The package 'react-native-file-access' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo Go\\n';\n\n// @ts-expect-error\nconst isTurboModuleEnabled = global.__turboModuleProxy != null;\n\nconst FileAccessModule = isTurboModuleEnabled\n  ? require('./NativeFileAccess').default\n  : NativeModules.FileAccess;\n\nconst FileAccessNative: Spec = FileAccessModule\n  ? FileAccessModule\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\n/**\n * ID tracking next fetch request.\n */\nlet nextRequestId = 1;\n\n/**\n * Process fetch events for the request.\n */\nfunction registerFetchListener(\n  requestId: number,\n  resolve: (res: FetchResult) => void,\n  reject: (e: Error) => void,\n  onProgress?: ProgressListener\n) {\n  const eventEmitter = new NativeEventEmitter(FileAccessModule);\n  const listener = eventEmitter.addListener(\n    'FetchEvent',\n    (event: FetchEvent) => {\n      if (event.requestId !== requestId) {\n        return;\n      }\n\n      if (event.state === 'progress') {\n        onProgress?.(event.bytesRead, event.contentLength, event.done);\n      } else if (event.state === 'error') {\n        listener.remove();\n        reject(new Error(event.message));\n      } else if (event.state === 'complete') {\n        listener.remove();\n        resolve({\n          headers: event.headers,\n          ok: event.ok,\n          redirected: event.redirected,\n          status: event.status,\n          statusText: event.statusText,\n          url: event.url,\n        });\n      }\n    }\n  );\n}\n\n/**\n * Get a `Promise` that will resolve after the specified timespan.\n */\nfunction sleep(milliseconds: number) {\n  return new Promise<void>((resolve) => setTimeout(resolve, milliseconds));\n}\n\n/**\n * Periodically report file copy status to the progress listener.\n */\nasync function wrapCpListener(\n  source: string,\n  target: string,\n  completion: Promise<void>,\n  onProgress: ProgressListener\n) {\n  const sourceStat = await FileSystem.stat(source);\n  while (true) {\n    const targetStat = await Promise.race([\n      completion.then(() => true),\n      sleep(150)\n        .then(() => FileSystem.stat(target))\n        .catch(() => false),\n    ]);\n    if (targetStat === true) {\n      onProgress(sourceStat.size, sourceStat.size, true);\n      break; // Process completed.\n    } else if (targetStat !== false) {\n      onProgress(targetStat.size, sourceStat.size, false);\n    }\n  }\n}\n\nexport const FileSystem = {\n  /**\n   * Append content to a file.\n   *\n   * Default encoding of `data` is assumed utf8.\n   */\n  appendFile(path: string, data: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.appendFile(path, data, encoding);\n  },\n\n  /**\n   * Append a file to another file.\n   *\n   * Returns number of bytes written.\n   */\n  concatFiles(source: string, target: string) {\n    return FileAccessNative.concatFiles(source, target);\n  },\n\n  /**\n   * Copy a file.\n   */\n  cp(source: string, target: string, onProgress?: ProgressListener) {\n    const res = FileAccessNative.cp(source, target);\n    return onProgress == null\n      ? res\n      : wrapCpListener(source, target, res, onProgress);\n  },\n\n  /**\n   * Copy a bundled asset file.\n   *\n   * When using Android asset type 'resource', include the folder, but skip the\n   * file extension. For example use 'raw/foo', for the file 'res/raw/foo.txt'.\n   * When possible, prefer using the 'assets/' folder; files in 'res/' have\n   * naming restrictions imposed by Android.\n   * https://developer.android.com/guide/topics/resources/providing-resources.html#OriginalFiles\n   */\n  cpAsset(asset: string, target: string, type: AssetType = 'asset') {\n    return FileAccessNative.cpAsset(asset, target, type);\n  },\n\n  /**\n   * Copy a file to an externally controlled location.\n   *\n   * On Android API level < 29, may require permission WRITE_EXTERNAL_STORAGE.\n   */\n  cpExternal(source: string, targetName: string, dir: ExternalDir) {\n    return FileAccessNative.cpExternal(source, targetName, dir);\n  },\n\n  /**\n   * Check device available space.\n   */\n  df(): Promise<FsStat> {\n    return FileAccessNative.df();\n  },\n\n  /**\n   * Check if a path exists.\n   */\n  exists(path: string) {\n    return FileAccessNative.exists(path);\n  },\n\n  /**\n   * Save a network request to a file.\n   */\n  async fetch(\n    resource: string,\n    init: FetchInit,\n    onProgress?: ProgressListener\n  ): Promise<FetchResult> {\n    const requestId = nextRequestId++;\n    return new Promise((resolve, reject) => {\n      registerFetchListener(requestId, resolve, reject, onProgress);\n      FileAccessNative.fetch(requestId, resource, init);\n    });\n  },\n\n  /**\n   * Save a network request to a file.\n   */\n  fetchManaged(\n    resource: string,\n    init: FetchInit,\n    onProgress?: ProgressListener\n  ): ManagedFetchResult {\n    const requestId = nextRequestId++;\n    return {\n      cancel: () => FileAccessNative.cancelFetch(requestId),\n      result: new Promise((resolve, reject) => {\n        registerFetchListener(requestId, resolve, reject, onProgress);\n        FileAccessNative.fetch(requestId, resource, init);\n      }),\n    };\n  },\n\n  /**\n   * Return the local storage directory for app groups.\n   *\n   * This is an Apple only feature.\n   */\n  getAppGroupDir(groupName: string) {\n    return FileAccessNative.getAppGroupDir(groupName);\n  },\n\n  /**\n   * Hash the file content.\n   */\n  hash(path: string, algorithm: HashAlgorithm) {\n    return FileAccessNative.hash(path, algorithm);\n  },\n\n  /**\n   * Check if a path is a directory.\n   */\n  isDir(path: string) {\n    return FileAccessNative.isDir(path);\n  },\n\n  /**\n   * List files in a directory.\n   */\n  ls(path: string) {\n    return FileAccessNative.ls(path);\n  },\n\n  /**\n   * Make a new directory.\n   *\n   * Returns path of the created directory.\n   */\n  mkdir(path: string) {\n    return FileAccessNative.mkdir(path);\n  },\n\n  /**\n   * Move a file.\n   */\n  mv(source: string, target: string) {\n    return FileAccessNative.mv(source, target);\n  },\n\n  /**\n   * Read the content of a file.\n   */\n  readFile(path: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.readFile(path, encoding);\n  },\n\n  /**\n   * Read a chunk of the content of a file.\n   */\n  readFileChunk(\n    path: string,\n    offset: number,\n    length: number,\n    encoding: Encoding = 'utf8'\n  ) {\n    return FileAccessNative.readFileChunk(path, offset, length, encoding);\n  },\n\n  /**\n   * Read file metadata.\n   */\n  stat(path: string): Promise<FileStat> {\n    return FileAccessNative.stat(path);\n  },\n\n  /**\n   * Read metadata of all files in a directory.\n   */\n  statDir(path: string): Promise<FileStat[]> {\n    return FileAccessNative.statDir(path);\n  },\n\n  /**\n   * Delete a file.\n   */\n  unlink(path: string) {\n    return FileAccessNative.unlink(path);\n  },\n\n  /**\n   * Extract a zip archive.\n   */\n  unzip(source: string, target: string) {\n    return FileAccessNative.unzip(source, target);\n  },\n\n  /**\n   * Write content to a file.\n   *\n   * Default encoding of `data` is assumed utf8.\n   */\n  writeFile(path: string, data: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.writeFile(path, data, encoding);\n  },\n};\n\n/**\n * Directory constants.\n */\nexport const Dirs: {\n  /**\n   * Temporary files. System/user may delete these if device storage is low.\n   */\n  CacheDir: string;\n\n  /**\n   * System recommended location for SQLite files.\n   *\n   * Android only.\n   */\n  DatabaseDir?: string;\n\n  /**\n   * Persistent data. Generally user created content.\n   */\n  DocumentDir: string;\n\n  /**\n   * Persistent app internal data.\n   *\n   * iOS & MacOS only.\n   */\n  LibraryDir?: string;\n\n  /**\n   * App's default root directory.\n   */\n  MainBundleDir: string;\n\n  /**\n   * Root path to removable media. Prefer `cpExternal()` when possible, as\n   * Android discourages this access method.\n   *\n   * Android only.\n   */\n  SDCardDir?: string;\n} = FileAccessModule\n  ? FileAccessNative.getConstants()\n  : new Proxy(\n      { CacheDir: '', DocumentDir: '', MainBundleDir: '' },\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\n/**\n * Utility functions for working with Android scoped storage.\n */\nexport const AndroidScoped = {\n  /**\n   * Append a path segment to an Android scoped storage content uri.\n   */\n  appendPath(basePath: string, segment: string) {\n    return basePath + encodeURIComponent('/' + segment);\n  },\n};\n"],"mappings":"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"}