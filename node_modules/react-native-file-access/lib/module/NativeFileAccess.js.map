{"version":3,"names":["TurboModuleRegistry","getEnforcing"],"sources":["NativeFileAccess.ts"],"sourcesContent":["import type { TurboModule } from 'react-native';\nimport { TurboModuleRegistry } from 'react-native';\n\nexport type FileStat = {\n  /**\n   * Filename does not include the path.\n   */\n  filename: string;\n  lastModified: number;\n  path: string;\n  /**\n   * File size in bytes.\n   */\n  size: number;\n  type: 'directory' | 'file';\n};\n\n/**\n * Values are in bytes.\n */\nexport type FsStat = {\n  internal_free: number;\n  internal_total: number;\n  external_free?: number;\n  external_total?: number;\n};\n\nexport interface Spec extends TurboModule {\n  addListener(eventType: string): void;\n  removeListeners(count: number): void;\n  appendFile(path: string, data: string, encoding: string): Promise<void>;\n  cancelFetch(requestId: number): Promise<void>;\n  concatFiles(source: string, target: string): Promise<number>;\n  cp(source: string, target: string): Promise<void>;\n  /**\n   * `type` only used on Android.\n   */\n  cpAsset(asset: string, target: string, type: string): Promise<void>;\n  cpExternal(source: string, targetName: string, dir: string): Promise<void>;\n  df(): Promise<FsStat>;\n  exists(path: string): Promise<boolean>;\n  /**\n   * Listen to `FetchEvent` events from the `requestId`.\n   */\n  fetch(\n    requestId: number,\n    resource: string,\n    init: {\n      body?: string;\n      headers?: Object;\n      method?: string;\n      network?: string;\n      path?: string;\n    }\n  ): void;\n  /**\n   * Only defined on iOS & MacOS.\n   */\n  getAppGroupDir(groupName: string): Promise<string>;\n  getConstants(): {\n    CacheDir: string;\n    DatabaseDir?: string;\n    DocumentDir: string;\n    LibraryDir?: string;\n    MainBundleDir: string;\n    SDCardDir?: string;\n  };\n  hash(path: string, algorithm: string): Promise<string>;\n  isDir(path: string): Promise<boolean>;\n  ls(path: string): Promise<string[]>;\n  mkdir(path: string): Promise<string>;\n  mv(source: string, target: string): Promise<void>;\n  readFile(path: string, encoding: string): Promise<string>;\n  readFileChunk(\n    path: string,\n    offset: number,\n    length: number,\n    encoding: string\n  ): Promise<string>;\n  stat(path: string): Promise<FileStat>;\n  statDir(path: string): Promise<FileStat[]>;\n  unlink(path: string): Promise<void>;\n  unzip(source: string, target: string): Promise<void>;\n  writeFile(path: string, data: string, encoding: string): Promise<void>;\n}\n\nexport default TurboModuleRegistry.getEnforcing<Spec>('FileAccess');\n"],"mappings":"AACA,SAASA,mBAAmB,QAAQ,cAAc;;AAgBlD;AACA;AACA;;AAmEA,eAAeA,mBAAmB,CAACC,YAAY,CAAO,YAAY,CAAC"}