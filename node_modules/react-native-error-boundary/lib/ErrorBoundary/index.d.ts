import React, { type ComponentType, type ReactNode } from 'react';
import { type Props as FallbackComponentProps } from './FallbackComponent';
export type Props = {
    children: Exclude<NonNullable<ReactNode>, string | number | boolean>;
    FallbackComponent: ComponentType<FallbackComponentProps>;
    onError?: (error: Error, stackTrace: string) => void;
};
type State = {
    error: Error | null;
};
declare class ErrorBoundary extends React.Component<Props, State> {
    state: State;
    static defaultProps: {
        FallbackComponent: ComponentType<FallbackComponentProps>;
    };
    static getDerivedStateFromError(error: Error): State;
    componentDidCatch(error: Error, info: {
        componentStack: string;
    }): void;
    resetError: () => void;
    render(): JSX.Element | React.ReactFragment;
}
export default ErrorBoundary;
//# sourceMappingURL=index.d.ts.map