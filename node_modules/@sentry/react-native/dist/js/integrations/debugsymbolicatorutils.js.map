{"version":3,"file":"debugsymbolicatorutils.js","sourceRoot":"","sources":["../../../src/js/integrations/debugsymbolicatorutils.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAGrE;;GAEG;AACH,MAAM,UAAgB,kBAAkB,CAAC,GAAW,EAAE,QAAuB,EAAE,KAAa;;QAC1F,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,MAAM,OAAO,GAAG,GAAG,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAE3D,MAAM,GAAG,GAAG,gBAAgB,EAAE,CAAC;YAC/B,IAAI,CAAC,GAAG,EAAE;gBACR,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,OAAO;aACR;YAED,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC/B,GAAG,CAAC,IAAI,EAAE,CAAC;YAEX,GAAG,CAAC,kBAAkB,GAAG,GAAS,EAAE;gBAClC,IAAI,GAAG,CAAC,UAAU,KAAK,mBAAmB,EAAE;oBAC1C,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;wBACtB,OAAO,CAAC,IAAI,CAAC,CAAC;qBACf;oBACD,MAAM,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC;oBAClC,IACE,OAAO,QAAQ,KAAK,QAAQ;wBAC5B,4DAA4D;wBAC5D,4DAA4D;wBAC5D,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EACxB;wBACA,OAAO,CAAC,IAAI,CAAC,CAAC;qBACf;oBAED,OAAO,CAAC,QAAQ,CAAC,CAAC;iBACnB;YACH,CAAC,CAAC;YACF,GAAG,CAAC,OAAO,GAAG,GAAS,EAAE;gBACvB,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAED;;GAEG;AACH,MAAM,UAAU,eAAe,CAAC,UAAkB;IAChD,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE;QAClC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;KACzD;IACD,OAAO,oBAAoB,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AACnE,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,qBAAqB,CACnC,KAAoC,EACpC,SAAmC;IAEnC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE;QAClC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;KACzD;IACD,OAAO,oBAAoB,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC/E,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY;;IAC1B,IAAI;QACF,OAAO,MAAA,oBAAoB,CAAC,QAAQ,0CAAE,YAAY,EAAE,CAAC;KACtD;IAAC,OAAO,GAAG,EAAE;QACZ,8BAA8B;KAC/B;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import { ReactNativeLibraries } from '../utils/rnlibraries';\nimport { createStealthXhr, XHR_READYSTATE_DONE } from '../utils/xhr';\nimport type * as ReactNative from '../vendor/react-native';\n\n/**\n * Get source context for segment\n */\nexport async function fetchSourceContext(url: string, segments: Array<string>, start: number): Promise<string | null> {\n  return new Promise(resolve => {\n    const fullUrl = `${url}${segments.slice(start).join('/')}`;\n\n    const xhr = createStealthXhr();\n    if (!xhr) {\n      resolve(null);\n      return;\n    }\n\n    xhr.open('GET', fullUrl, true);\n    xhr.send();\n\n    xhr.onreadystatechange = (): void => {\n      if (xhr.readyState === XHR_READYSTATE_DONE) {\n        if (xhr.status !== 200) {\n          resolve(null);\n        }\n        const response = xhr.responseText;\n        if (\n          typeof response !== 'string' ||\n          // Expo Dev Server responses with status 200 and config JSON\n          // when web support not enabled and requested file not found\n          response.startsWith('{')\n        ) {\n          resolve(null);\n        }\n\n        resolve(response);\n      }\n    };\n    xhr.onerror = (): void => {\n      resolve(null);\n    };\n  });\n}\n\n/**\n * Loads and calls RN Core Devtools parseErrorStack function.\n */\nexport function parseErrorStack(errorStack: string): Array<ReactNative.StackFrame> {\n  if (!ReactNativeLibraries.Devtools) {\n    throw new Error('React Native Devtools not available.');\n  }\n  return ReactNativeLibraries.Devtools.parseErrorStack(errorStack);\n}\n\n/**\n * Loads and calls RN Core Devtools symbolicateStackTrace function.\n */\nexport function symbolicateStackTrace(\n  stack: Array<ReactNative.StackFrame>,\n  extraData?: Record<string, unknown>,\n): Promise<ReactNative.SymbolicatedStackTrace> {\n  if (!ReactNativeLibraries.Devtools) {\n    throw new Error('React Native Devtools not available.');\n  }\n  return ReactNativeLibraries.Devtools.symbolicateStackTrace(stack, extraData);\n}\n\n/**\n * Loads and returns the RN DevServer URL.\n */\nexport function getDevServer(): ReactNative.DevServerInfo | undefined {\n  try {\n    return ReactNativeLibraries.Devtools?.getDevServer();\n  } catch (_oO) {\n    // We can't load devserver URL\n  }\n  return undefined;\n}\n"]}