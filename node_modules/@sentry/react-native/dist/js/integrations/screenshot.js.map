{"version":3,"file":"screenshot.js","sourceRoot":"","sources":["../../../src/js/integrations/screenshot.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,2BAA2B,EAAE,MAAM,cAAc,CAAC;AAK3D,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAEpC,MAAM,gBAAgB,GAAG,YAAY,CAAC;AAEtC,uCAAuC;AACvC,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAwB,EAAE;IAC7D,OAAO;QACL,IAAI,EAAE,gBAAgB;QACtB,SAAS,EAAE,GAAG,EAAE;YACd,OAAO;QACT,CAAC;QACD,YAAY;KACb,CAAC;AACJ,CAAC,CAAC;AAEF;;;;GAIG;AACH,mDAAmD;AACnD,MAAM,CAAC,MAAM,UAAU,GAAG,2BAA2B,CACnD,gBAAgB,EAChB,qBAAqB,CACW,CAAC;AAEnC,SAAe,YAAY,CAAC,KAAY,EAAE,IAAe,EAAE,MAAyB;;;QAClF,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;QAEpC,MAAM,YAAY,GAAG,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACpG,IAAI,CAAC,YAAY,IAAI,CAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,wDAAG,KAAK,EAAE,IAAI,CAAC,MAAK,KAAK,EAAE;YACvE,OAAO,KAAK,CAAC;SACd;QAED,MAAM,WAAW,GAAkC,MAAM,MAAM,CAAC,iBAAiB,EAAE,CAAC;QACpF,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YACzC,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,WAAW,EAAE,GAAG,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,KAAI,EAAE,CAAC,CAAC,CAAC;SACnE;QAED,OAAO,KAAK,CAAC;;CACd","sourcesContent":["import { convertIntegrationFnToClass } from '@sentry/core';\nimport type { Event, EventHint, Integration, IntegrationClass, IntegrationFnResult } from '@sentry/types';\n\nimport type { ReactNativeClient } from '../client';\nimport type { Screenshot as ScreenshotAttachment } from '../wrapper';\nimport { NATIVE } from '../wrapper';\n\nconst INTEGRATION_NAME = 'Screenshot';\n\n/** Adds screenshots to error events */\nexport const screenshotIntegration = (): IntegrationFnResult => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce: () => {\n      // noop\n    },\n    processEvent,\n  };\n};\n\n/**\n * Adds screenshots to error events\n *\n * @deprecated Use `screenshotIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Screenshot = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  screenshotIntegration,\n) as IntegrationClass<Integration>;\n\nasync function processEvent(event: Event, hint: EventHint, client: ReactNativeClient): Promise<Event> {\n  const options = client.getOptions();\n\n  const hasException = event.exception && event.exception.values && event.exception.values.length > 0;\n  if (!hasException || options?.beforeScreenshot?.(event, hint) === false) {\n    return event;\n  }\n\n  const screenshots: ScreenshotAttachment[] | null = await NATIVE.captureScreenshot();\n  if (screenshots && screenshots.length > 0) {\n    hint.attachments = [...screenshots, ...(hint?.attachments || [])];\n  }\n\n  return event;\n}\n"]}