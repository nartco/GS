{"version":3,"file":"sentryBabelTransformer.js","sourceRoot":"","sources":["../../../src/js/tools/sentryBabelTransformer.ts"],"names":[],"mappings":"AAAA,6FAA8E;AAE9E,iDAA8C;AAC9C,+EAA4E;AAG5E,IAAA,2BAAY,GAAE,CAAC;AAEf;;GAEG;AACH,SAAS,4BAA4B;IACnC,MAAM,kBAAkB,GAAG,IAAA,yDAA2B,GAAE,CAAC;IAEzD,4EAA4E;IAC5E,MAAM,SAAS,GAAkC,CAAC,GAAG,IAAI,EAAE,EAAE;QAC3D,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAEhC,gCAAgC,CAAC,eAAe,CAAC,CAAC;QAElD,OAAO,kBAAkB,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC;IAEF,uCACK,kBAAkB,KACrB,SAAS,IACT;AACJ,CAAC;AAED,SAAS,gCAAgC,CAAC,IAAsC;IAC9E,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QAC9E,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;QAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,yCAAuB,CAAC,CAAC;KAC5C;AACH,CAAC;AAED,MAAM,sBAAsB,GAAG,4BAA4B,EAAE,CAAC;AAG9D,iBAAS,sBAAsB,CAAC","sourcesContent":["import componentAnnotatePlugin from '@sentry/babel-plugin-component-annotate';\n\nimport { enableLogger } from './enableLogger';\nimport { loadDefaultBabelTransformer } from './sentryBabelTransformerUtils';\nimport type { BabelTransformer, BabelTransformerArgs } from './vendor/metro/metroBabelTransformer';\n\nenableLogger();\n\n/**\n * Creates a Babel transformer with Sentry component annotation plugin.\n */\nfunction createSentryBabelTransformer(): BabelTransformer {\n  const defaultTransformer = loadDefaultBabelTransformer();\n\n  // Using spread operator to avoid any conflicts with the default transformer\n  const transform: BabelTransformer['transform'] = (...args) => {\n    const transformerArgs = args[0];\n\n    addSentryComponentAnnotatePlugin(transformerArgs);\n\n    return defaultTransformer.transform(...args);\n  };\n\n  return {\n    ...defaultTransformer,\n    transform,\n  };\n}\n\nfunction addSentryComponentAnnotatePlugin(args: BabelTransformerArgs | undefined): void {\n  if (!args || typeof args.filename !== 'string' || !Array.isArray(args.plugins)) {\n    return undefined;\n  }\n\n  if (!args.filename.includes('node_modules')) {\n    args.plugins.push(componentAnnotatePlugin);\n  }\n}\n\nconst sentryBabelTransformer = createSentryBabelTransformer();\n// With TS set to `commonjs` this will be translated to `module.exports = sentryBabelTransformer;`\n// which will be correctly picked up by Metro\nexport = sentryBabelTransformer;\n"]}