{"version":3,"file":"sentryBabelTransformerUtils.js","sourceRoot":"","sources":["../../../src/js/tools/sentryBabelTransformerUtils.ts"],"names":[],"mappings":";;AAAA,yCAAuC;AACvC,yBAAyB;AACzB,6BAA6B;AAC7B,mCAAmC;AAInC;;GAEG;AACH,SAAgB,+BAA+B,CAAC,2BAAmC;IACjF,IAAI;QACF,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACvE,EAAE,CAAC,aAAa,CAAC,8BAA8B,EAAE,EAAE,2BAA2B,CAAC,CAAC;QAChF,cAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;KACtD;IAAC,OAAO,CAAC,EAAE;QACV,sCAAsC;QACtC,OAAO,CAAC,KAAK,CAAC,yDAAyD,EAAE,CAAC,CAAC,CAAC;KAC7E;AACH,CAAC;AATD,0EASC;AAED;;GAEG;AACH,SAAgB,+BAA+B;IAC7C,IAAI;QACF,OAAO,EAAE,CAAC,YAAY,CAAC,8BAA8B,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;KACrE;IAAC,OAAO,CAAC,EAAE;QACV,sCAAsC;QACtC,OAAO,CAAC,KAAK,CAAC,yDAAyD,EAAE,CAAC,CAAC,CAAC;KAC7E;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AARD,0EAQC;AAED;;GAEG;AACH,SAAgB,gCAAgC;IAC9C,IAAI;QACF,EAAE,CAAC,UAAU,CAAC,8BAA8B,EAAE,CAAC,CAAC;QAChD,cAAM,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;KACxD;IAAC,OAAO,CAAC,EAAE;QACV,6DAA6D;QAC7D,sCAAsC;QACtC,OAAO,CAAC,KAAK,CAAC,0DAA0D,EAAE,CAAC,CAAC,CAAC;KAC9E;AACH,CAAC;AATD,4EASC;AAED,SAAS,8BAA8B;IACrC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,sCAAsC,CAAC,CAAC;AAC1E,CAAC;AAED;;GAEG;AACH,SAAgB,2BAA2B;IACzC,MAAM,2BAA2B,GAAG,+BAA+B,EAAE,CAAC;IACtE,IAAI,CAAC,2BAA2B,EAAE;QAChC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;KACrF;IAED,cAAM,CAAC,KAAK,CAAC,0CAA0C,2BAA2B,EAAE,CAAC,CAAC;IACtF,8DAA8D;IAC9D,OAAO,OAAO,CAAC,2BAA2B,CAAC,CAAC;AAC9C,CAAC;AATD,kEASC","sourcesContent":["import { logger } from '@sentry/utils';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as process from 'process';\n\nimport type { BabelTransformer } from './vendor/metro/metroBabelTransformer';\n\n/**\n * Saves default Babel transformer path to the project root.\n */\nexport function saveDefaultBabelTransformerPath(defaultBabelTransformerPath: string): void {\n  try {\n    fs.mkdirSync(path.join(process.cwd(), '.sentry'), { recursive: true });\n    fs.writeFileSync(getDefaultBabelTransformerPath(), defaultBabelTransformerPath);\n    logger.debug('Saved default Babel transformer path');\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('[Sentry] Failed to save default Babel transformer path:', e);\n  }\n}\n\n/**\n * Reads default Babel transformer path from the project root.\n */\nexport function readDefaultBabelTransformerPath(): string | undefined {\n  try {\n    return fs.readFileSync(getDefaultBabelTransformerPath()).toString();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('[Sentry] Failed to read default Babel transformer path:', e);\n  }\n  return undefined;\n}\n\n/**\n * Cleans default Babel transformer path from the project root.\n */\nexport function cleanDefaultBabelTransformerPath(): void {\n  try {\n    fs.unlinkSync(getDefaultBabelTransformerPath());\n    logger.debug('Cleaned default Babel transformer path');\n  } catch (e) {\n    // We don't want to fail the build if we can't clean the file\n    // eslint-disable-next-line no-console\n    console.error('[Sentry] Failed to clean default Babel transformer path:', e);\n  }\n}\n\nfunction getDefaultBabelTransformerPath(): string {\n  return path.join(process.cwd(), '.sentry/.defaultBabelTransformerPath');\n}\n\n/**\n * Loads default Babel transformer from `@react-native/metro-config` -> `@react-native/metro-babel-transformer`.\n */\nexport function loadDefaultBabelTransformer(): BabelTransformer {\n  const defaultBabelTransformerPath = readDefaultBabelTransformerPath();\n  if (!defaultBabelTransformerPath) {\n    throw new Error('Default Babel Transformer Path not found in `.sentry` directory.');\n  }\n\n  logger.debug(`Loading default Babel transformer from ${defaultBabelTransformerPath}`);\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  return require(defaultBabelTransformerPath);\n}\n"]}