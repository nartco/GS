import type { Configuration, InternalConfiguration } from './config';
import type { SpanInternal } from './span';
export type SpanAttribute = string | number | boolean;
export interface SpanAttributesSource<C extends Configuration> {
    configure: (configuration: InternalConfiguration<C>) => void;
    requestAttributes: (span: SpanInternal) => void;
}
export declare class SpanAttributes {
    private readonly attributes;
    constructor(initialValues: Map<string, SpanAttribute>);
    set(name: string, value: SpanAttribute): void;
    remove(name: string): void;
    toJson(): (JsonAttribute | undefined)[];
}
export declare class ResourceAttributes extends SpanAttributes {
    constructor(releaseStage: string, appVersion: string, serviceName: string, sdkName: string, sdkVersion: string);
}
export type ResourceAttributeSource<C extends Configuration> = (configuration: InternalConfiguration<C>) => Promise<ResourceAttributes>;
export interface JsonAttribute {
    key: string;
    value: {
        stringValue: string;
    } | {
        intValue: string;
    } | {
        doubleValue: number;
    } | {
        boolValue: boolean;
    };
}
export declare function attributeToJson(key: string, attribute: SpanAttribute): JsonAttribute | undefined;
//# sourceMappingURL=attributes.d.ts.map