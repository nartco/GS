import { isObject } from '@bugsnag/core-performance';
import { Util } from './file-utils.js';

/**
 * A wrapper around 'react-native-file-access' that allows reading from a
 * specific file without having to specify the path every time it's used
 */
class ReadOnlyFile {
    constructor(path, fileSystem) {
        this.path = path;
        this.fileSystem = fileSystem;
    }
    async read() {
        return await this.fileSystem.readFile(this.path);
    }
}
/**
 * Like a 'ReadOnlyFile' but also allows writing to the file
 */
class File extends ReadOnlyFile {
    constructor(path, fileSystem) {
        super(path, fileSystem);
        this.directory = Util.dirname(path);
    }
    async write(data) {
        await this.ensureDirectoryExists();
        await this.fileSystem.writeFile(this.path, data, 'utf8');
    }
    async ensureDirectoryExists() {
        try {
            await this.fileSystem.mkdir(this.directory);
        }
        catch (err) {
            // on Android mkdir will fail if the directory already exists, which isn't
            // an error case we care about
            // on iOS it will succeed unless there's a genuine error
            if (isObject(err) && err.code !== 'EEXIST') {
                throw err;
            }
        }
    }
}
/**
 * Fulfills the 'ReadWriteFile' interface without doing any reading or writing
 */
class NullFile {
    async read() {
        return '';
    }
    async write(data) {
    }
}

export { File, NullFile, ReadOnlyFile };
