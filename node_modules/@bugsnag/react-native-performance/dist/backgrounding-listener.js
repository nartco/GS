function createBrowserBackgroundingListener(appState) {
    const callbacks = [];
    let state = appState.currentState === 'background' ? 'in-background' : 'in-foreground';
    const backgroundingListener = {
        onStateChange(backgroundingListenerCallback) {
            callbacks.push(backgroundingListenerCallback);
            // trigger the callback immediately if the app is already in the background
            if (state === 'in-background') {
                backgroundingListenerCallback(state);
            }
        }
    };
    const backgroundStateChanged = (newState) => {
        if (state === newState)
            return;
        state = newState;
        for (const callback of callbacks) {
            callback(state);
        }
    };
    appState.addEventListener('change', (state) => {
        const newState = state === 'active' || appState.currentState === 'unknown'
            ? 'in-foreground'
            : 'in-background';
        backgroundStateChanged(newState);
    });
    return backgroundingListener;
}

export { createBrowserBackgroundingListener as default };
