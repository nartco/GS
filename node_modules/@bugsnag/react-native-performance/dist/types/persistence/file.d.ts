import type { FileSystem } from 'react-native-file-access';
export interface ReadableFile {
    read: () => Promise<string>;
}
export interface WritableFile {
    write: (data: string) => Promise<void>;
}
export type ReadWriteFile = ReadableFile & WritableFile;
/**
 * A wrapper around 'react-native-file-access' that allows reading from a
 * specific file without having to specify the path every time it's used
 */
export declare class ReadOnlyFile implements ReadableFile {
    protected readonly path: string;
    protected readonly fileSystem: typeof FileSystem;
    constructor(path: string, fileSystem: typeof FileSystem);
    read(): Promise<string>;
}
/**
 * Like a 'ReadOnlyFile' but also allows writing to the file
 */
export declare class File extends ReadOnlyFile implements ReadWriteFile {
    private readonly directory;
    constructor(path: string, fileSystem: typeof FileSystem);
    write(data: string): Promise<void>;
    private ensureDirectoryExists;
}
/**
 * Fulfills the 'ReadWriteFile' interface without doing any reading or writing
 */
export declare class NullFile implements ReadWriteFile {
    read(): Promise<string>;
    write(data: string): Promise<void>;
}
//# sourceMappingURL=file.d.ts.map