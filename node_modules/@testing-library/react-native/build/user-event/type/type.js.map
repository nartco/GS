{"version":3,"file":"type.js","names":["_hostComponentNames","require","_eventBuilder","_errors","_textInput","_pointerEvents","_utils","_parseKeys","type","element","text","options","isHostTextInput","ErrorWithStack","isTextInputEditable","isPointerEventEnabled","keys","parseKeys","skipPress","dispatchEvent","EventBuilder","Common","touch","focus","wait","config","currentText","props","value","defaultValue","key","previousText","proposedText","applyKey","isAccepted","isTextChangeAccepted","emitTypingEvents","finalText","submitEditing","TextInput","endEditing","blur","isMultiline","multiline","keyPress","change","selectionRange","start","length","end","selectionChange","contentSize","getTextContentSize","contentSizeChange","slice","maxLength","undefined"],"sources":["../../../src/user-event/type/type.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport { isHostTextInput } from '../../helpers/host-component-names';\nimport { EventBuilder } from '../event-builder';\nimport { ErrorWithStack } from '../../helpers/errors';\nimport { isTextInputEditable } from '../../helpers/text-input';\nimport { isPointerEventEnabled } from '../../helpers/pointer-events';\nimport { UserEventConfig, UserEventInstance } from '../setup';\nimport { dispatchEvent, wait, getTextContentSize } from '../utils';\nimport { parseKeys } from './parse-keys';\n\nexport interface TypeOptions {\n  skipPress?: boolean;\n  submitEditing?: boolean;\n}\n\nexport async function type(\n  this: UserEventInstance,\n  element: ReactTestInstance,\n  text: string,\n  options?: TypeOptions,\n): Promise<void> {\n  if (!isHostTextInput(element)) {\n    throw new ErrorWithStack(\n      `type() works only with host \"TextInput\" elements. Passed element has type \"${element.type}\".`,\n      type,\n    );\n  }\n\n  // Skip events if the element is disabled\n  if (!isTextInputEditable(element) || !isPointerEventEnabled(element)) {\n    return;\n  }\n\n  const keys = parseKeys(text);\n\n  if (!options?.skipPress) {\n    dispatchEvent(element, 'pressIn', EventBuilder.Common.touch());\n  }\n\n  dispatchEvent(element, 'focus', EventBuilder.Common.focus());\n\n  if (!options?.skipPress) {\n    await wait(this.config);\n    dispatchEvent(element, 'pressOut', EventBuilder.Common.touch());\n  }\n\n  let currentText = element.props.value ?? element.props.defaultValue ?? '';\n  for (const key of keys) {\n    const previousText = element.props.value ?? currentText;\n    const proposedText = applyKey(previousText, key);\n    const isAccepted = isTextChangeAccepted(element, proposedText);\n    currentText = isAccepted ? proposedText : previousText;\n\n    await emitTypingEvents(element, {\n      config: this.config,\n      key,\n      text: currentText,\n      isAccepted,\n    });\n  }\n\n  const finalText = element.props.value ?? currentText;\n  await wait(this.config);\n\n  if (options?.submitEditing) {\n    dispatchEvent(element, 'submitEditing', EventBuilder.TextInput.submitEditing(finalText));\n  }\n\n  dispatchEvent(element, 'endEditing', EventBuilder.TextInput.endEditing(finalText));\n\n  dispatchEvent(element, 'blur', EventBuilder.Common.blur());\n}\n\ntype EmitTypingEventsContext = {\n  config: UserEventConfig;\n  key: string;\n  text: string;\n  isAccepted?: boolean;\n};\n\nexport async function emitTypingEvents(\n  element: ReactTestInstance,\n  { config, key, text, isAccepted }: EmitTypingEventsContext,\n) {\n  const isMultiline = element.props.multiline === true;\n\n  await wait(config);\n  dispatchEvent(element, 'keyPress', EventBuilder.TextInput.keyPress(key));\n\n  // Platform difference (based on experiments):\n  // - iOS and RN Web: TextInput emits only `keyPress` event when max length has been reached\n  // - Android: TextInputs does not emit any events\n  if (isAccepted === false) {\n    return;\n  }\n\n  dispatchEvent(element, 'change', EventBuilder.TextInput.change(text));\n  dispatchEvent(element, 'changeText', text);\n\n  const selectionRange = {\n    start: text.length,\n    end: text.length,\n  };\n  dispatchEvent(element, 'selectionChange', EventBuilder.TextInput.selectionChange(selectionRange));\n\n  // According to the docs only multiline TextInput emits contentSizeChange event\n  // @see: https://reactnative.dev/docs/textinput#oncontentsizechange\n  if (isMultiline) {\n    const contentSize = getTextContentSize(text);\n    dispatchEvent(\n      element,\n      'contentSizeChange',\n      EventBuilder.TextInput.contentSizeChange(contentSize),\n    );\n  }\n}\n\nfunction applyKey(text: string, key: string) {\n  if (key === 'Enter') {\n    return `${text}\\n`;\n  }\n\n  if (key === 'Backspace') {\n    return text.slice(0, -1);\n  }\n\n  return text + key;\n}\n\nfunction isTextChangeAccepted(element: ReactTestInstance, text: string) {\n  const maxLength = element.props.maxLength;\n  return maxLength === undefined || text.length <= maxLength;\n}\n"],"mappings":"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","ignoreList":[]}